# Perform hyperparameter tuning using GridSearchCV
from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'max_features': ['auto', 'sqrt', 'log2']
}

grid_search = GridSearchCV(estimator=rf_clf, param_grid=param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

# Get the best parameters and best score
print("Best parameters found:", grid_search.best_params_)
print("Best cross-validation accuracy:", grid_search.best_score_)

# Evaluate on validation set with best estimator
best_rf_clf = grid_search.best_estimator_
y_pred_best = best_rf_clf.predict(X_val)

print("\nAccuracy on validation set (best model):", accuracy_score(y_val, y_pred_best))
print("\nClassification Report (best model):")
print(classification_report(y_val, y_pred_best))
